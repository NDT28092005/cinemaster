// src/pages/admin/EditShowtimes.jsx
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";

export default function EditShowtimes() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [showtime, setShowtime] = useState(null);
  const [movies, setMovies] = useState([]);
  const [cinemas, setCinemas] = useState([]);
  const [auditoriums, setAuditoriums] = useState([]);
  const [loading, setLoading] = useState(true);

  // üß† Load d·ªØ li·ªáu ban ƒë·∫ßu
  useEffect(() => {
    async function fetchData() {
      try {
        const [showtimeRes, movieRes, cinemaRes] = await Promise.all([
          axios.get(`http://localhost:8000/api/showtimes/${id}`),
          axios.get("http://localhost:8000/api/movies"),
          axios.get("http://localhost:8000/api/cinemas"),
        ]);

        setShowtime(showtimeRes.data);
        setMovies(movieRes.data);
        setCinemas(cinemaRes.data);

        // T·∫£i ph√≤ng chi·∫øu t∆∞∆°ng ·ª©ng
        if (showtimeRes.data.cinema_id) {
          const audRes = await axios.get(
            `http://localhost:8000/api/auditoriums?cinema_id=${showtimeRes.data.cinema_id}`
          );
          setAuditoriums(audRes.data);
        }
      } catch (err) {
        console.error("L·ªói khi load showtime:", err);
        alert("Kh√¥ng th·ªÉ t·∫£i su·∫•t chi·∫øu!");
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, [id]);

  // üè¢ Khi ƒë·ªïi r·∫°p ‚Üí load l·∫°i ph√≤ng chi·∫øu
  async function handleCinemaChange(e) {
    const cinema_id = e.target.value;
    setShowtime({ ...showtime, cinema_id, auditorium_id: "" });

    if (!cinema_id) return setAuditoriums([]);
    const res = await axios.get(
      `http://localhost:8000/api/auditoriums?cinema_id=${cinema_id}`
    );
    setAuditoriums(res.data);
  }

  // üíæ L∆∞u thay ƒë·ªïi
  async function handleUpdate(e) {
    e.preventDefault();
    try {
      await axios.put(`http://localhost:8000/api/showtimes/${id}`, {
        ...showtime,
        start_time: showtime.start_time?.replace("T", " "),
        end_time: showtime.end_time?.replace("T", " "),
      });
      alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      navigate("/admin/showtimes");
    } catch (err) {
      console.error(err);
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  }

  if (loading || !showtime) return <div>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <div className="container mt-4">
      <h2 className="fw-bold text-primary mb-4">üé¨ Ch·ªânh s·ª≠a Su·∫•t chi·∫øu</h2>

      <form onSubmit={handleUpdate} className="card p-4 shadow-sm border-0">
        <div className="row g-3">
          {/* üéû Phim */}
          <div className="col-md-4">
            <label className="form-label">Phim</label>
            <select
              className="form-select"
              value={showtime.movie_id || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, movie_id: e.target.value })
              }
            >
              <option value="">-- Ch·ªçn phim --</option>
              {movies.map((m) => (
                <option key={m.id} value={m.id}>
                  {m.title}
                </option>
              ))}
            </select>
          </div>

          {/* üè¢ R·∫°p */}
          <div className="col-md-4">
            <label className="form-label">R·∫°p</label>
            <select
              className="form-select"
              value={showtime.cinema_id || ""}
              onChange={handleCinemaChange}
            >
              <option value="">-- Ch·ªçn r·∫°p --</option>
              {cinemas.map((c) => (
                <option key={c.id} value={c.id}>
                  {c.name}
                </option>
              ))}
            </select>
          </div>

          {/* ü™ë Ph√≤ng chi·∫øu */}
          <div className="col-md-4">
            <label className="form-label">Ph√≤ng chi·∫øu</label>
            <select
              className="form-select"
              value={showtime.auditorium_id || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, auditorium_id: e.target.value })
              }
            >
              <option value="">-- Ch·ªçn ph√≤ng --</option>
              {auditoriums.map((a) => (
                <option key={a.id} value={a.id}>
                  {a.name}
                </option>
              ))}
            </select>
          </div>

          {/* üïí Th·ªùi gian b·∫Øt ƒë·∫ßu / k·∫øt th√∫c */}
          <div className="col-md-6">
            <label className="form-label">B·∫Øt ƒë·∫ßu</label>
            <input
              type="datetime-local"
              className="form-control"
              value={showtime.start_time?.replace(" ", "T") || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, start_time: e.target.value })
              }
            />
          </div>

          <div className="col-md-6">
            <label className="form-label">K·∫øt th√∫c</label>
            <input
              type="datetime-local"
              className="form-control"
              value={showtime.end_time?.replace(" ", "T") || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, end_time: e.target.value })
              }
            />
          </div>

          {/* üí∞ Gi√° v√© */}
          <div className="col-md-3">
            <label className="form-label">Gi√° c∆° b·∫£n</label>
            <input
              type="number"
              className="form-control"
              value={showtime.base_price || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, base_price: e.target.value })
              }
            />
          </div>

          {/* üßç‚Äç‚ôÇÔ∏è S·ª©c ch·ª©a / gh·∫ø tr·ªëng */}
          <div className="col-md-3">
            <label className="form-label">S·ª©c ch·ª©a</label>
            <input
              type="number"
              className="form-control"
              value={showtime.capacity || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, capacity: e.target.value })
              }
            />
          </div>

          <div className="col-md-3">
            <label className="form-label">Gh·∫ø tr·ªëng</label>
            <input
              type="number"
              className="form-control"
              value={showtime.available_seats || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, available_seats: e.target.value })
              }
            />
          </div>

          {/* üî§ Ng√¥n ng·ªØ & ƒë·ªãnh d·∫°ng */}
          <div className="col-md-3">
            <label className="form-label">Ng√¥n ng·ªØ</label>
            <input
              type="text"
              className="form-control"
              value={showtime.language || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, language: e.target.value })
              }
            />
          </div>

          <div className="col-md-3">
            <label className="form-label">ƒê·ªãnh d·∫°ng</label>
            <input
              type="text"
              className="form-control"
              value={showtime.format || ""}
              onChange={(e) =>
                setShowtime({ ...showtime, format: e.target.value })
              }
            />
          </div>

          {/* üéüÔ∏è Tr·∫°ng th√°i */}
          <div className="col-md-3">
            <label className="form-label">Tr·∫°ng th√°i</label>
            <select
              className="form-select"
              value={showtime.status || "scheduled"}
              onChange={(e) =>
                setShowtime({ ...showtime, status: e.target.value })
              }
            >
              <option value="scheduled">ƒêang chi·∫øu</option>
              <option value="cancelled">ƒê√£ h·ªßy</option>
              <option value="finished">ƒê√£ k·∫øt th√∫c</option>
              <option value="sold_out">H·∫øt v√©</option>
            </select>
          </div>

          {/* üé• 3D / IMAX */}
          <div className="col-md-3 d-flex align-items-center">
            <div className="form-check me-3">
              <input
                type="checkbox"
                className="form-check-input"
                checked={!!showtime.is_3d}
                onChange={(e) =>
                  setShowtime({ ...showtime, is_3d: e.target.checked })
                }
              />
              <label className="form-check-label">3D</label>
            </div>

            <div className="form-check">
              <input
                type="checkbox"
                className="form-check-input"
                checked={!!showtime.is_imax}
                onChange={(e) =>
                  setShowtime({ ...showtime, is_imax: e.target.checked })
                }
              />
              <label className="form-check-label">IMAX</label>
            </div>
          </div>

          {/* üíæ N√∫t l∆∞u */}
          <div className="col-md-12 text-end mt-4">
            <button className="btn btn-primary px-4" type="submit">
              üíæ L∆∞u thay ƒë·ªïi
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}
